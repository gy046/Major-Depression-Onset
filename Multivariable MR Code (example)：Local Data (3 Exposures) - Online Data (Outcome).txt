

setwd("       ")

library(tidyr)
library(vroom)


GCST90085827<- vroom('GCST90085827_buildGRCh38.tsv.gz',col_names = TRUE)
colnames(GCST90085827)
GCST90085827 = GCST90085827[,c(1,5,6,8,9,11,2,7)]
colnames(GCST90085827) = c("SNP","effect_allele","other_allele","beta","se","samplesize","pval","eaf")
GCST90085827$pval <- as.numeric(GCST90085827$pval)
GCST90085827$beta <- as.numeric(GCST90085827$beta)
GCST90085827$se <- as.numeric(GCST90085827$se)
save(GCST90085827,file="GCST90085827.rda")
write.csv(GCST90085827,"GCST90085827.csv")



GCST90085859<- vroom('GCST90085859_buildGRCh38.tsv.gz',col_names = TRUE)
colnames(GCST90085859)

GCST90085859 = GCST90085859[,c(1,5,6,8,9,11,2,7)]
colnames(GCST90085859) = c("SNP","effect_allele","other_allele","beta","se","samplesize","pval","eaf")
GCST90085859$pval <- as.numeric(GCST90085859$pval)
GCST90085859$beta <- as.numeric(GCST90085859$beta)
GCST90085859$se <- as.numeric(GCST90085859$se)
save(GCST90085859,file="GCST90085859.rda")
write.csv(GCST90085859,"GCST90085859.csv")



GCST90085868<- vroom('GCST90085868_buildGRCh38.tsv.gz',col_names = TRUE)
colnames(GCST90085868)
GCST90085868 = GCST90085868[,c(1,5,6,8,9,11,2,7)]
colnames(GCST90085868) = c("SNP","effect_allele","other_allele","beta","se","samplesize","pval","eaf")
GCST90085868$pval <- as.numeric(GCST90085868$pval)
GCST90085868$beta <- as.numeric(GCST90085868$beta)
GCST90085868$se <- as.numeric(GCST90085868$se)
save(GCST90085868,file="GCST90085868.rda")
write.csv(GCST90085868,"GCST90085868.csv")




load("GCST90085827.rda")

load("GCST90085859.rda")

load("GCST90085868.rda")



library(TwoSampleMR)
library(ieugwasr)

X1<-subset(GCST90085827,pval<5e-6)
X1<-format_data(X1,type = "exposure")
X111<-clump_data(X1,clump_kb = 10000,clump_r2 = 0.001) 


save(X111,file="X111.rda")



X2<-subset(GCST90085859,pval<5e-6)
X2<-format_data(X2,type = "exposure")
X222<-clump_data(X2,clump_kb = 10000,clump_r2 = 0.001)


save(X222,file="X222.rda")



X3<-subset(GCST90085868,pval<5e-6)
X3<-format_data(X3,type = "exposure")
X333<-clump_data(X3,clump_kb = 10000,clump_r2 = 0.001)


save(X333,file="X333.rda")





library(dplyr)
library(plyr)
SNP_list <- rbind.fill(X111, X222, X333)
SNP_list <- select(SNP_list,-id.exposure)
SNP_list_c<-clump_data(SNP_list,clump_kb = 10000,clump_r2 = 0.001)




save(SNP_list_c,file="SNP_list_c.rda")

SNP_u<-unique(SNP_list_c$SNP)



GCST90085827_X1<-GCST90085827[GCST90085827$SNP%in%SNP_u,]

GCST90085859_X2<-GCST90085859[GCST90085859$SNP%in%SNP_u,]

GCST90085868_X3<-GCST90085868[GCST90085868$SNP%in%SNP_u,]






snps<-intersect(GCST90085827_X1$SNP,GCST90085859_X2$SNP)
snps<-intersect(snps,GCST90085868_X3$SNP)




d1<-format_data(
  GCST90085827,
  type = "exposure",
  snps = snps)

d1$exposure<-"GCST90085827"
d1$id.exposure<-"GCST90085827"



d2<-format_data(
  GCST90085859,
  type = "exposure",
  snps = snps)

d2$exposure<-"GCST90085859"
d2$id.exposure<-"GCST90085859"



d3<-format_data(
  GCST90085868,
  type = "exposure",
  snps = snps)

d3$exposure<-"GCST90085868"
d3$id.exposure<-"GCST90085868"



exposure_dat <- rbind(d1, d2, d3)






id_outcome <- "ieu-b-102"  
outcome_dat <- extract_outcome_data(exposure_dat$SNP, id_outcome) 
save(outcome_dat,file="out.rda")
mvdat <- mv_harmonise_data(exposure_dat, outcome_dat)
save(mvdat,file="mvdat.rda")
res <- mv_multiple(mvdat)
res
res_OR<-generate_odds_ratios(res$result)
res_OR
write.csv(res_OR,'res_OR.csv')
save(res_OR,file="res_OR.rda")





data<-cbind(mvdat[["outcome_beta"]],
            mvdat[["exposure_beta"]][,1],
            mvdat[["exposure_beta"]][,2],
            mvdat[["exposure_beta"]][,3],
            mvdat[["exposure_se"]][,1],
            mvdat[["exposure_se"]][,2],
            mvdat[["exposure_se"]][,3],
            mvdat[["outcome_se"]])
data<-data.frame(data)
colnames(data) = c("betaY","betaX1","betaX2","betaX3",
                   "seX1","seX2","seX3","seY")


library(MendelianRandomization)

MRMVInputObject<- mr_mvinput(bx = cbind(data$betaX1,data$betaX2,data$betaX3),
                             bxse = cbind(data$seX1,data$seX2,data$seX3),
                             by = data$betaY, 
                             byse = data$seY)
MRMVInputObject

IVW <- mr_mvivw(MRMVInputObject, 
                model = "default",
                correl = FALSE,
                distribution = "normal",
                alpha = 0.05)
IVW

transform<- function(beta,se) {
  OR= exp(beta)
  LL_OR= exp(beta-se*1.96)
  UL_OR=exp(beta+se*1.96)
  pval<-2*pnorm(abs(beta/se),lower.tail=FALSE)
  OR_P<-cbind(OR,LL_OR,UL_OR,pval)
  print(OR_P)
} 
OR_ivw<- transform(IVW@Estimate,IVW@StdError)
#egger方法
egger<-mr_mvegger(MRMVInputObject,
                  orientate = 1,
                  correl = FALSE,
                  distribution = "normal",
                  alpha = 0.05)
egger
OR_egger<- transform(egger@Estimate,egger@StdError.Est)

Lasso<-mr_mvlasso(
  MRMVInputObject,
  orientate = 1,
  distribution = "normal",
  alpha = 0.05,
  lambda = numeric(0)
)
Lasso


median<-mr_mvmedian(
  MRMVInputObject,
  distribution = "normal",
  alpha = 0.05,
  iterations = 10000,
  seed = 314159265
)
median

library(tidyverse)
library(RColorBrewer)
library(cowplot)
library(gridExtra)
library(robustbase)
mvmr_robust = function(bx, by, seby, k.max = 500, maxit.scale = 500){
  robmod = lmrob(by ~ bx - 1, weights = seby^-2, k.max = k.max,
                 maxit.scale = maxit.scale)
  coefficients = summary(robmod)$coef[, 1]
  se = summary(robmod)$coef[, 2] / min(summary(robmod)$sigma, 1)
  return(list("coefficients" = coefficients, "se" = se))
}

mvmr_robust <- mvmr_robust(cbind(data$betaX1,data$betaX2,data$betaX3),
                           data$betaY,data$seY,
                           k.max = 1000, maxit.scale = 1000)
mvmr_robust

transform<- function(beta,se) {
  OR= exp(beta)
  LL_OR= exp(beta-se*1.96)
  UL_OR=exp(beta+se*1.96)
  pval<-2*pnorm(abs(beta/se),lower.tail=FALSE)
  OR_P<-cbind(OR,LL_OR,UL_OR,pval)
  print(OR_P)
} 

mvmr_robust<- transform(mvmr_robust[["coefficients"]],mvmr_robust[["se"]])

library(MVMR)
head(data)

F.data <- format_mvmr(BXGs = data[,c(2,3,4)],
                      BYG = data[,1],
                      seBXGs = data[,c(5,6,7)],
                      seBYG = data[,8],
                      RSID="NULL")

sres <- strength_mvmr(r_input = F.data, gencov = 0)

pres <- pleiotropy_mvmr(r_input = F.data, gencov = 0)

res <- ivw_mvmr(r_input = F.data)